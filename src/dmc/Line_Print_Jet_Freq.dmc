## Line printing DMC program on the BJ system
## Jacob Lawrence
// the lines above (two lines of ## with a space after) are needed
//     for preprocessor features to work
##option "--min 4"
// force max compression
REM****************************************************************************
// NOTES:
// labels can be up to 7 characters
// variables can be up to 8 characters
REM****************************************************************************
#AUTO
BXX=2
BXY=2
EN
#BEGIN
// Define variables
yCnt = 800;  // encoder counts per mm for the y-axis
xCnt = 1000; // encoder counts per mm for the x-axis
DM Data[11]; // reserve array for getting info on line set to print
// Note that array names are limited to 6 characters
//      when they are going to be passed to a subroutine.
JS #fill("Data", 0);     // fill Data array with 0's
// Wait for PC to set begin bit (Data[0])
#DATA_WT
#LOOP
WT 100
begin = Data[0]; // get begin bit from PC
JP #LOOP, begin=0; // loop while waiting for begin bit
// end program if the computer sets the first value in the array to 2
// continue if the computer sets the first value to 1
JP #STOP, begin=2
JS #PRINT
Data[0] = 0; // reinitialize begin bit
// loop back to DATA_WT ot await next input from computer
// have the computer look for this value set to 0 to know when to act next
JP #DATA_WT
//****************************************************************************
#STOP
// move to default position
MG "CMD JET_FREQ 1024"; // reset jetting frequency
MG "CMD JET_NDROPS 1"; // reset num drops
SPX = 60 * xCnt
PAX = 150 * xCnt
JGY = 40 * yCnt
BGXY
AM
// have the computer tell the nozzle to start jetting again
// End routine here
EN
//****************************************************************************
#PRINT // print sequence
minFreq = 500;
maxFreq = 8000;
// place array data in variables
strtX = Data[1];  // X Axis start position (counts)
strtY = Data[2];  // Y Axis start position (counts)
numLs = Data[3];  // number of lines to print
lSpce = Data[4];  // line spacing (counts)
lDist = Data[5];  // length of line to print (counts)
dSpceH = Data[6];  // jetting droplet spacing (um)
dSpceL = Data[7];  // Low droplet spacing (um) (using jetFreq spot)
// jetHz = 1.0 / maxPRI * 1000.0;  // jetting frequency (Hz)
//pVelc = Data[8];  // print speed (counts/sec)
pAccl = Data[9];  // print acceleration (counts/sec^2)
index = Data[10]; // index for which line is being printing (#)

MG "CMD JET_NDROPS 999"; // send command to set number of drops to jet
freqSpce = (maxFreq - minFreq) / (numLs - 1)
jetHz = minFreq

// print logic goes here

// set accelerations and decelerations
ACX = pAccl
DCX = pAccl
ACY = 400 * yCnt
DCY = 400 * yCnt

// configure jetting
SHH
ACH = 1073740800
DCH = 1073740800
// calculate acceleration distance
REM****************************************************************************
// for each line to be printed in the set
#PRNTL
MG "CMD JET_FREQ", jetHz{Z5.0}; // send command to set jetting frequency 

vi = dSpceL * jetHz / 1000 * xCnt; // counts/s
vf = dSpceH * jetHz / 1000 * xCnt; // counts/s

vAVG = (vi + vf) / 2.0; // counts/s
vDIF = vf - vi; // counts/s

tPrint = lDist / vAVG; // time to print line (in seconds)
acVal = vDIF / tPrint; // acceleration distance (counts/s^2)
tTot = vf / acVal; // total time to print line (in seconds)
accT = tTot - tPrint; // time to accelerate (in seconds)
accD = 0.5 * acVal * accT * accT; // acceleration distance (in counts)

SPX = 80 * xCnt
SPY = 60 * yCnt
// move to initial start position
PAX = (strtX - accD) // offset by acceleration distance
PAY = strtY
BGXY
AM
// print line
WT 500 // wait for 500 ms before printing the line
PRH = 1 // only give one pulse to jetDrive

toSAMP = 1000.0 / (_TM/1024)
updR = 100 // update rate
numSegs = @INT[tTot * toSAMP / updR] + 1 // add an extra segment for safety
tUpd = updR / toSAMP // seconds per segment
n = 0
pPrev = 0 // counts
#fillp // fill PVT data
tCur = n*tUpd
pNew = 0.5 * acVal * tCur * tCur // counts
v = acVal * tCur // counts/s
dx = pNew - pPrev // counts
PAX = dx, v, updR
pPrev = pNew
n = n + 1
JP #fillp, n<numSegs

// slow to stop
tDec = v / pAccl // time to decelerate
distD = 0.5 * (v + 0) * tDec // samples
tDSamp = @INT[tDec * toSAMP]
IF(tDSamp>2048); // set max sample size of 2048
    tDSamp = 2048;
ENDIF
PAX = distD, 0, tDSamp

// end PVT
PAX = 0,0,0

AT 0 // set reference time
BTX;
AT @INT[accT * 1000] // wait to start printing (s -> milliseconds)
BGH // start jetting


AM
strtY = strtY + lSpce
index = index+1 // increment index
jetHz = jetHz + freqSpce // increment jetting frequency
JP #PRNTL, index<numLs // jump to next line or end
EN // end subroutine
//*****************************************************************************
#fill;                      // simple subroutine to fill array with values
^c= 0;                      // use local scope ^c for iterator
#fill_h;                    // fill loop
^a[^c]= ^b;                 // set each value of the array
^c= ^c+1
JP #fill_h,(^c<^a[-1]);     // keep setting array values for length of array
EN